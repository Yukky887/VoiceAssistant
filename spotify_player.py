import requests
import json
from config import CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN, DEVICE_NAME


class SpotifyPlayer:
    def __init__(self):
        self.client_id = CLIENT_ID
        self.client_secret = CLIENT_SECRET
        self.refresh_token = REFRESH_TOKEN
        self.device_name = DEVICE_NAME

    def get_access_token(self):
        url = "https://accounts.spotify.com/api/token"
        data = {
            "grant_type": "refresh_token",
            "refresh_token": self.refresh_token
        }
        resp = requests.post(url, data=data, auth=(self.client_id, self.client_secret))
        if resp.status_code == 200:
            return resp.json()["access_token"]
        else:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {resp.text}")

    def get_device_id(self, token):
        try:
            response = requests.get(
                "https://api.spotify.com/v1/me/player/devices",
                headers={"Authorization": f"Bearer {token}"}
            )

            if response.status_code != 200:
                raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {response.text}")

            devices_data = response.json()
            device = next((d for d in devices_data.get("devices", []) if d["name"] == self.device_name), None)

            if not device:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                active_device = next((d for d in devices_data.get("devices", []) if d["is_active"]), None)
                if active_device:
                    print(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{self.device_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é –∞–∫—Ç–∏–≤–Ω–æ–µ: {active_device['name']}")
                    return active_device["id"]
                else:
                    raise Exception(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{self.device_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

            return device["id"]
        except Exception as e:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")

    def play(self, query: dict):
        try:
            token = self.get_access_token()
            device_id = self.get_device_id(token)

            headers = {
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            }

            action = query.get("action", "none")

            if action == "play":
                track = query.get('track', '')
                artist = query.get('artist', '')

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                search_query = f"track:{track}"
                if artist:
                    search_query += f" artist:{artist}"

                print(f"üîç –ò—â—É: {track} - {artist}")

                search_response = requests.get(
                    f"https://api.spotify.com/v1/search?q={search_query}&type=track&limit=1&market=RU",
                    headers=headers
                )

                if search_response.status_code != 200:
                    raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_response.text}")

                search_data = search_response.json()

                if search_data["tracks"]["items"]:
                    uri = search_data["tracks"]["items"][0]["uri"]
                    track_name = search_data["tracks"]["items"][0]["name"]
                    artist_name = search_data["tracks"]["items"][0]["artists"][0]["name"]

                    play_response = requests.put(
                        f"https://api.spotify.com/v1/me/player/play?device_id={device_id}",
                        headers=headers,
                        data=json.dumps({"uris": [uri]})
                    )

                    if play_response.status_code in [200, 204]:
                        print(f"üéµ –ò–≥—Ä–∞–µ—Ç: {track_name} - {artist_name}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {play_response.text}")
                else:
                    print("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Spotify")

            elif action == "playlist":
                playlist = query.get('playlist', '')

                search_response = requests.get(
                    f"https://api.spotify.com/v1/search?q={playlist}&type=playlist&limit=1&market=RU",
                    headers=headers
                )

                if search_response.status_code != 200:
                    raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {search_response.text}")

                search_data = search_response.json()

                if search_data["playlists"]["items"]:
                    uri = search_data["playlists"]["items"][0]["uri"]
                    playlist_name = search_data["playlists"]["items"][0]["name"]

                    play_response = requests.put(
                        f"https://api.spotify.com/v1/me/player/play?device_id={device_id}",
                        headers=headers,
                        data=json.dumps({"context_uri": uri})
                    )

                    if play_response.status_code in [200, 204]:
                        print(f"üéµ –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_name}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {play_response.text}")
                else:
                    print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

            elif action == "pause":
                response = requests.put(
                    f"https://api.spotify.com/v1/me/player/pause?device_id={device_id}",
                    headers=headers
                )
                if response.status_code in [200, 204]:
                    print("‚è∏Ô∏è –ü–∞—É–∑–∞")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã: {response.text}")

            elif action == "resume":
                response = requests.put(
                    f"https://api.spotify.com/v1/me/player/play?device_id={device_id}",
                    headers=headers
                )
                if response.status_code in [200, 204]:
                    print("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")

            elif action == "next":
                response = requests.post(
                    f"https://api.spotify.com/v1/me/player/next?device_id={device_id}",
                    headers=headers
                )
                if response.status_code in [200, 204]:
                    print("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {response.text}")

            elif action == "previous":
                response = requests.post(
                    f"https://api.spotify.com/v1/me/player/previous?device_id={device_id}",
                    headers=headers
                )
                if response.status_code in [200, 204]:
                    print("‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {response.text}")

            elif action == "none":
                print("ü§ñ –≠—Ç–æ –Ω–µ –º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")