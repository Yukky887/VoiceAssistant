import json
import ollama
import re


class LlamaAssistant:
    def __init__(self, model="qwen2.5:7b-instruct"):
        self.model = model
        self.music_system_prompt = """
–¢—ã ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
- "play" - –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫ (–ø—Ä–∏–º–µ—Ä: "–≤–∫–ª—é—á–∏ —Ç—Ä–µ–∫ Shape of You")
- "playlist" - –≤–∫–ª—é—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç/–∂–∞–Ω—Ä (–ø—Ä–∏–º–µ—Ä: "–≤–∫–ª—é—á–∏ —Ä–æ–∫ –º—É–∑—ã–∫—É")  
- "favorites" - –≤–∫–ª—é—á–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ (–ø—Ä–∏–º–µ—Ä: "–≤–∫–ª—é—á–∏ –º–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏")
- "pause" - –ø–∞—É–∑–∞ (–ø—Ä–∏–º–µ—Ä: "–ø–∞—É–∑–∞")
- "resume" - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–ø—Ä–∏–º–µ—Ä: "–ø—Ä–æ–¥–æ–ª–∂–∏")
- "next" - —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ (–ø—Ä–∏–º–µ—Ä: "—Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")
- "previous" - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ (–ø—Ä–∏–º–µ—Ä: "–ø—Ä–µ–¥—ã–¥—É—â–∏–π")
- "volume" - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä: "–≥—Ä–æ–º—á–µ")
- "question" - –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –ù–ï –æ –º—É–∑—ã–∫–µ (–ø—Ä–∏–º–µ—Ä: "—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ")
- "none" - –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

–í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û JSON –ë–ï–ó –õ–Æ–ë–û–ì–û –î–†–£–ì–û–ì–û –¢–ï–ö–°–¢–ê!

–§–æ—Ä–º–∞—Ç JSON:
{"action": "—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è", "track": "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç—Ä–µ–∫–∞", "artist": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "playlist": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–ª–µ–π–ª–∏—Å—Ç–∞", "level": "—É—Ä–æ–≤–µ–Ω—å_–≥—Ä–æ–º–∫–æ—Å—Ç–∏", "query": "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π_–≤–æ–ø—Ä–æ—Å"}

–ü—Ä–∏–º–µ—Ä—ã:
"–≤–∫–ª—é—á–∏ shape of you —ç–¥–∞ —à–∏—Ä–∞–Ω–∞" -> {"action": "play", "track": "Shape of You", "artist": "Ed Sheeran"}
"–ø–æ—Å—Ç–∞–≤—å —Ä–æ–∫ –º—É–∑—ã–∫—É" -> {"action": "playlist", "playlist": "Rock"}
"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏" -> {"action": "question", "query": "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"}
"–ø–∞—É–∑–∞" -> {"action": "pause"}
"–≥—Ä–æ–º—á–µ" -> {"action": "volume", "level": "up"}
"–≤–∫–ª—é—á–∏ –º–æ–∏ —Ç—Ä–µ–∫–∏" -> {"action": "favorites"}

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{query}"
"""

        self.qa_system_prompt = """
–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –î–∂–∞ÃÅ—Ä–≤–∏—Å. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ö–†–ê–¢–ö–û –∏ –ü–û–ù–Ø–¢–ù–û –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.

–û–ß–ï–ù–¨ –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∏—Ç–∞–π—Å–∫–∏–µ, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
3. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
5. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
–í–æ–ø—Ä–æ—Å: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?"
–û—Ç–≤–µ—Ç: "–î–≤–∞ –ø–ª—é—Å –¥–≤–∞ –±—É–¥–µ—Ç —á–µ—Ç—ã—Ä–µ"

–í–æ–ø—Ä–æ—Å: "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?"
–û—Ç–≤–µ—Ç: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –≤ –ø–æ–≥–æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"

–í–æ–ø—Ä–æ—Å: "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ"
–û—Ç–≤–µ—Ç: "–ö–æ—Å–º–æ—Å ‚Äî —ç—Ç–æ –±–µ—Å–∫—Ä–∞–π–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏, –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –∏ –≥–∞–ª–∞–∫—Ç–∏–∫–∞–º–∏. –ù–∞—à–∞ –°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å"

–í–æ–ø—Ä–æ—Å: "–°–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç —Å–ª–æ–Ω?"
–û—Ç–≤–µ—Ç: "–í–∑—Ä–æ—Å–ª—ã–π –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å–ª–æ–Ω –≤–µ—Å–∏—Ç –æ—Ç 4 –¥–æ 7 —Ç–æ–Ω–Ω, –∞ –∏–Ω–¥–∏–π—Å–∫–∏–π —Å–ª–æ–Ω ‚Äî –æ—Ç 3 –¥–æ 5 —Ç–æ–Ω–Ω"

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{query}"
"""

    def clean_transcription(self, text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        if not text:
            return ""
        text = re.sub(r'\s+', ' ', text).strip()
        return text

    def extract_json_from_response(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{[^{}]*\}', content)
            if json_match:
                json_str = json_match.group()
                return json.loads(json_str)
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
                return json.loads(content)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            content_lower = content.lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å
            question_indicators = ['—Å–∫–æ–ª—å–∫–æ', '—á—Ç–æ', '–∫—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏']
            if any(indicator in content_lower for indicator in question_indicators):
                return {"action": "question", "query": content}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            music_commands = {
                '–ø–∞—É–∑–∞': 'pause',
                '—Å—Ç–æ–ø': 'pause',
                '–ø—Ä–æ–¥–æ–ª–∂–∏': 'resume',
                '–¥–∞–ª—å—à–µ': 'next',
                '—Å–ª–µ–¥—É—é—â–∏–π': 'next',
                '–ø—Ä–µ–¥—ã–¥—É—â–∏–π': 'previous',
                '–Ω–∞–∑–∞–¥': 'previous',
                '–≥—Ä–æ–º—á–µ': 'volume',
                '—Ç–∏—à–µ': 'volume',
                '–ª—é–±–∏–º—ã–µ': 'favorites',
                '–º–æ–∏ —Ç—Ä–µ–∫–∏': 'favorites'
            }

            for ru_command, action in music_commands.items():
                if ru_command in content_lower:
                    if action == 'volume':
                        level = 'up' if '–≥—Ä–æ–º—á–µ' in content_lower else 'down'
                        return {"action": "volume", "level": level}
                    return {"action": action}

            # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –ø—Ä–æ –≤–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
            if any(word in content_lower for word in ['–≤–∫–ª—é—á–∏', '–ø–æ—Å—Ç–∞–≤—å', '–∑–∞–ø—É—Å—Ç–∏']):
                if '–ø–ª–µ–π–ª–∏—Å—Ç' in content_lower or '–º—É–∑—ã–∫' in content_lower:
                    return {"action": "playlist", "playlist": "Popular"}
                else:
                    return {"action": "play", "track": "Unknown", "artist": ""}

            return {"action": "none"}

    def classify_intent(self, query: str) -> dict:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            formatted_prompt = self.music_system_prompt.replace("{query}", query)

            response = ollama.chat(
                model=self.model,
                messages=[
                    {"role": "system", "content": formatted_prompt},
                    {"role": "user", "content": query}
                ],
                options={
                    'temperature': 0.1
                }
            )

            content = response["message"]["content"].strip()
            print(f"üì® –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {content}")

            return self.extract_json_from_response(content)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return {"action": "none"}

    def clean_russian_response(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"""
        # –£–¥–∞–ª—è–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[\u4e00-\u9fff]+', '', text)
        # –£–¥–∞–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        text = re.sub(r'Note:.*', '', text, flags=re.IGNORECASE)
        text = re.sub(r'Example:.*', '', text, flags=re.IGNORECASE)
        text = re.sub(r'Answer:.*', '', text, flags=re.IGNORECASE)
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)
        text = re.sub(r'`.*?`', '', text)
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        text = re.sub(r'\d+\.\s*[A-Za-z].*', '', text)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text).strip()

        return text

    def answer_question(self, query: str) -> str:
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É
            strict_prompt = f"""
–¢–´ –î–û–õ–ñ–ï–ù –û–¢–í–ï–ß–ê–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!
–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –ö–ò–¢–ê–ô–°–ö–ò–ô, –ê–ù–ì–õ–ò–ô–°–ö–ò–ô –ò–õ–ò –î–†–£–ì–ò–ï –Ø–ó–´–ö–ò!
–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ö–†–ê–¢–ö–ò–ú (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ò –ü–û–ù–Ø–¢–ù–´–ú.

–í–æ–ø—Ä–æ—Å: {query}

–†—É—Å—Å–∫–∏–π –æ—Ç–≤–µ—Ç:"""

            response = ollama.chat(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏."
                    },
                    {"role": "user", "content": strict_prompt}
                ],
                options={
                    'temperature': 0.3,
                    'top_p': 0.9
                }
            )

            answer = response["message"]["content"].strip()

            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª—é–±—ã—Ö –Ω–µ-—Ä—É—Å—Å–∫–∏—Ö –≤–∫—Ä–∞–ø–ª–µ–Ω–∏–π
            answer = self.clean_russian_response(answer)

            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not answer:
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."

            print(f"ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {answer}")
            return answer

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"

    def ask(self, query: str) -> dict:
        cleaned_query = self.clean_transcription(query)
        print(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {cleaned_query}")

        if not cleaned_query:
            return {"action": "none"}

        # –°–Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        intent = self.classify_intent(cleaned_query)

        # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        if intent.get("action") == "question":
            question_text = intent.get("query", cleaned_query)
            answer = self.answer_question(question_text)
            intent["answer"] = answer

        return intent