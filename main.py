# main.py
from llama_assistant import LlamaAssistant
from spotify_player import SpotifyPlayer
from voice_synthesizer_gtts import tts
from voice_processor import VoiceProcessor
import time
import sys
import random

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏
try:
    from speech_recognition_alternative import SpeechRecognizer

    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é SpeechRecognition —Å VAD")
except ImportError:
    try:
        from speech import SpeechRecognizer

        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é Vosk")
    except ImportError:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
        sys.exit(1)


class AdvancedVoiceActivator:
    def __init__(self, activation_phrases=["–¥–∂–∞—Ä–≤–∏—Å", "jarvis"], deactivation_phrase="—Å–ø–∞—Ç—å"):
        self.activation_phrases = [p.lower() for p in activation_phrases]
        self.deactivation_phrase = deactivation_phrase.lower()
        self.is_active = False

        self.greetings = [
            "–°–ª—É—à–∞—é –≤–∞—Å",
            "–î–∞, —è –∑–¥–µ—Å—å",
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "–°–ª—É—à–∞—é –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã"
        ]

        self.goodbyes = [
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!",
            "–û—Ç–¥—ã—Ö–∞—é –¥–æ –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è",
            "–í—ã–∫–ª—é—á–∞—é—Å—å",
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        ]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.voice_processor = VoiceProcessor(wake_words=activation_phrases)

    def wake_word_callback(self, event):
        """Callback –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ wake word"""
        if event == "wake_word_detected" and not self.is_active:
            self.activate()

    def activate(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
        if not self.is_active:
            self.is_active = True
            greeting = random.choice(self.greetings)
            print(f"‚úÖ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! {greeting}")
            tts.speak_async(greeting)
            return True
        return False

    def deactivate(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø—Ä–æ—â–∞–Ω–∏–µ–º"""
        if self.is_active:
            self.is_active = False
            goodbye = random.choice(self.goodbyes)
            print(f"üí§ –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù! {goodbye}")
            tts.speak_async(goodbye)
            return True
        return False

    def check_activation(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞"""
        if not text:
            return False

        text_lower = text.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫
        for phrase in self.activation_phrases:
            if self._fuzzy_match(phrase, text_lower):
                return self.activate()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if self.deactivation_phrase in text_lower:
            return self.deactivate()

        return False

    def _fuzzy_match(self, target, text, max_distance_ratio=0.3):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞"""
        from Levenshtein import distance as lev_distance

        words = text.split()
        for word in words:
            dist = lev_distance(target, word)
            max_allowed = int(len(target) * max_distance_ratio)
            if dist <= max_allowed:
                return True
        return False

    def start_wake_word_detection(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ wake word"""
        self.voice_processor.start_listening(self.wake_word_callback)

    def stop_wake_word_detection(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ wake word"""
        self.voice_processor.stop_listening()


def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä
        activator = AdvancedVoiceActivator(
            activation_phrases=["–¥–∂–∞—Ä–≤–∏—Å", "–¥–∂–∞–≤—Ä–∏—Å", "–¥–∂–∞—Ä–≤–∏–∑", "jarvis"],
            deactivation_phrase="—Å–ø–∞—Ç—å"
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        recognizer = SpeechRecognizer()
        assistant = LlamaAssistant()
        player = SpotifyPlayer()

        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        tts.speak("–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –î–∂–∞ÃÅ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ wake word
        activator.start_wake_word_detection()

        print(f"\nüéØ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
        print(f"üîä Wake word detection –∞–∫—Ç–∏–≤–µ–Ω")
        print(f"üéØ –°–∫–∞–∂–∏—Ç–µ '{activator.activation_phrases[0]}' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        print(f"üí§ –°–∫–∞–∂–∏—Ç–µ '{activator.deactivation_phrase}' –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        print(f"‚ùì –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")
        print(f"üéµ –ò–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –º—É–∑—ã–∫–æ–π\n")

        while True:
            try:
                # –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                if not activator.is_active:
                    print("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï - —Å–∫–∞–∂–∏—Ç–µ '–¥–∂–∞—Ä–≤–∏—Å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...", end='\r')
                    time.sleep(1)
                    continue

                # –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                print("\nüé§ –ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú - —Å–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å VAD
                audio = recognizer.listen_with_vad(timeout=10, phrase_time_limit=7)

                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                query = recognizer.transcribe(audio) if audio else ""

                if query:
                    print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {query}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                if activator.check_activation(query):
                    continue

                # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è
                if not query or len(query.strip()) < 2:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ LLM
                intent = assistant.ask(query)
                print(f"ü§ñ LLM –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∫–∞–∫: {intent}")

                action = intent.get('action', 'none')

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                if action in ['play', 'playlist', 'favorites', 'pause', 'resume', 'next', 'previous', 'volume']:
                    # –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                    if action == 'play':
                        track = intent.get('track', '')
                        if track:
                            tts.speak_async(f"–í–∫–ª—é—á–∞—é {track}")
                    elif action == 'playlist':
                        playlist = intent.get('playlist', '')
                        if playlist:
                            tts.speak_async(f"–í–∫–ª—é—á–∞—é –ø–ª–µ–π–ª–∏—Å—Ç {playlist}")
                    elif action == 'favorites':
                        tts.speak_async("–í–∫–ª—é—á–∞—é –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏")
                    elif action == 'pause':
                        tts.speak_async("–°—Ç–∞–≤–ª—é –Ω–∞ –ø–∞—É–∑—É")
                    elif action == 'resume':
                        tts.speak_async("–ü—Ä–æ–¥–æ–ª–∂–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
                    elif action == 'next':
                        tts.speak_async("–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")
                    elif action == 'previous':
                        tts.speak_async("–í–æ–∑–≤—Ä–∞—â–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫")
                    elif action == 'volume':
                        level = intent.get('level', '')
                        if level == 'up':
                            tts.speak_async("–£–≤–µ–ª–∏—á–∏–≤–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å")
                        elif level == 'down':
                            tts.speak_async("–£–º–µ–Ω—å—à–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å")
                        elif isinstance(level, int):
                            tts.speak_async(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ {level} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")

                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
                    player.play(intent)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                elif action == 'question':
                    answer = intent.get('answer', '')
                    if answer:
                        print(f"üí≠ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {answer}")
                        tts.speak(answer)
                    else:
                        tts.speak("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å")

                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                elif action == 'none':
                    tts.speak("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É")
                    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

                print("\n" + "=" * 50)
                if activator.is_active:
                    print("üéØ –ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú - –∂–¥—É —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É")
                    print("üí§ –°–∫–∞–∂–∏—Ç–µ '—Å–ø–∞—Ç—å' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                print("=" * 50 + "\n")

            except KeyboardInterrupt:
                print("\nüëã –í—ã–∫–ª—é—á–∞—é –∫–æ–ª–æ–Ω–∫—É...")
                activator.stop_wake_word_detection()
                tts.speak("–í—ã–∫–ª—é—á–∞—é—Å—å, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(1)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    main()