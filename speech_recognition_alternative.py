# speech_recognition_alternative.py
import speech_recognition as sr
import threading
import time
import numpy as np
from voice_processor import SimpleVAD


class SpeechRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.vad = SimpleVAD()
        self.is_recording = False

        # –ö–∞–ª–∏–±—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
        print("üîß –ö–∞–ª–∏–±—Ä—É—é –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=1)
        print("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω!")

    def listen_with_vad(self, timeout=10, phrase_time_limit=7):
        """–°–ª—É—à–∞–µ—Ç —Å Voice Activity Detection"""
        print("üé§ –°–ª—É—à–∞—é —Å VAD...")

        start_time = time.time()
        audio_data = None

        def record_callback(recognizer, audio):
            nonlocal audio_data
            audio_data = audio

        # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤ —Ñ–æ–Ω–µ
        stop_listening = self.recognizer.listen_in_background(
            self.microphone,
            record_callback,
            phrase_time_limit=phrase_time_limit
        )

        # –ñ–¥–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
        while time.time() - start_time < timeout:
            if audio_data is not None:
                stop_listening(wait_for_stop=False)
                print("‚úÖ –†–µ—á—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
                return audio_data
            time.sleep(0.1)

        stop_listening(wait_for_stop=False)
        print("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
        return None

    def listen(self, duration=5):
        """–û–±—ã—á–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        print("üé§ –°–ª—É—à–∞—é...")

        try:
            with self.microphone as source:
                audio = self.recognizer.listen(
                    source,
                    timeout=duration,
                    phrase_time_limit=duration
                )
            print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return audio
        except sr.WaitTimeoutError:
            print("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            return None

    def transcribe(self, audio):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ"""
        if audio is None:
            return ""

        try:
            text = self.recognizer.recognize_google(audio, language="ru-RU")
            return text.strip()
        except sr.UnknownValueError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            return ""
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return ""